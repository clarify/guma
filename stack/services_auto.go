// Code generated by opcua-xml2code. DO NOT EDIT.

package stack

import (
	"bytes"

	"github.com/searis/guma/stack/encoding/binary"
	"github.com/searis/guma/stack/transport"
	"github.com/searis/guma/stack/uatype"
)

func (c *Client) CreateSession(req uatype.CreateSessionRequest) (*uatype.CreateSessionResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCreateSessionRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CreateSessionResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) ActivateSession(req uatype.ActivateSessionRequest) (*uatype.ActivateSessionResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdActivateSessionRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.ActivateSessionResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) CloseSession(req uatype.CloseSessionRequest) (*uatype.CloseSessionResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCloseSessionRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CloseSessionResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Cancel(req uatype.CancelRequest) (*uatype.CancelResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCancelRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CancelResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) AddNodes(req uatype.AddNodesRequest) (*uatype.AddNodesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdAddNodesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.AddNodesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) AddReferences(req uatype.AddReferencesRequest) (*uatype.AddReferencesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdAddReferencesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.AddReferencesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) DeleteNodes(req uatype.DeleteNodesRequest) (*uatype.DeleteNodesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdDeleteNodesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.DeleteNodesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) DeleteReferences(req uatype.DeleteReferencesRequest) (*uatype.DeleteReferencesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdDeleteReferencesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.DeleteReferencesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Browse(req uatype.BrowseRequest) (*uatype.BrowseResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdBrowseRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.BrowseResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) BrowseNext(req uatype.BrowseNextRequest) (*uatype.BrowseNextResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdBrowseNextRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.BrowseNextResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) TranslateBrowsePathsToNodeIds(req uatype.TranslateBrowsePathsToNodeIdsRequest) (*uatype.TranslateBrowsePathsToNodeIdsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdTranslateBrowsePathsToNodeIdsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.TranslateBrowsePathsToNodeIdsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) RegisterNodes(req uatype.RegisterNodesRequest) (*uatype.RegisterNodesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdRegisterNodesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.RegisterNodesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) UnregisterNodes(req uatype.UnregisterNodesRequest) (*uatype.UnregisterNodesResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdUnregisterNodesRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.UnregisterNodesResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) QueryFirst(req uatype.QueryFirstRequest) (*uatype.QueryFirstResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdQueryFirstRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.QueryFirstResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) QueryNext(req uatype.QueryNextRequest) (*uatype.QueryNextResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdQueryNextRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.QueryNextResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Read(req uatype.ReadRequest) (*uatype.ReadResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdReadRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.ReadResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) HistoryRead(req uatype.HistoryReadRequest) (*uatype.HistoryReadResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdHistoryReadRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.HistoryReadResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Write(req uatype.WriteRequest) (*uatype.WriteResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdWriteRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.WriteResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) HistoryUpdate(req uatype.HistoryUpdateRequest) (*uatype.HistoryUpdateResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdHistoryUpdateRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.HistoryUpdateResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Call(req uatype.CallRequest) (*uatype.CallResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCallRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CallResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) CreateMonitoredItems(req uatype.CreateMonitoredItemsRequest) (*uatype.CreateMonitoredItemsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCreateMonitoredItemsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CreateMonitoredItemsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) ModifyMonitoredItems(req uatype.ModifyMonitoredItemsRequest) (*uatype.ModifyMonitoredItemsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdModifyMonitoredItemsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.ModifyMonitoredItemsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) SetMonitoringMode(req uatype.SetMonitoringModeRequest) (*uatype.SetMonitoringModeResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdSetMonitoringModeRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.SetMonitoringModeResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) SetTriggering(req uatype.SetTriggeringRequest) (*uatype.SetTriggeringResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdSetTriggeringRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.SetTriggeringResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) DeleteMonitoredItems(req uatype.DeleteMonitoredItemsRequest) (*uatype.DeleteMonitoredItemsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdDeleteMonitoredItemsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.DeleteMonitoredItemsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) CreateSubscription(req uatype.CreateSubscriptionRequest) (*uatype.CreateSubscriptionResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdCreateSubscriptionRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.CreateSubscriptionResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) ModifySubscription(req uatype.ModifySubscriptionRequest) (*uatype.ModifySubscriptionResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdModifySubscriptionRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.ModifySubscriptionResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) SetPublishingMode(req uatype.SetPublishingModeRequest) (*uatype.SetPublishingModeResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdSetPublishingModeRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.SetPublishingModeResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Publish(req uatype.PublishRequest) (*uatype.PublishResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdPublishRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.PublishResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) Republish(req uatype.RepublishRequest) (*uatype.RepublishResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdRepublishRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.RepublishResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) TransferSubscriptions(req uatype.TransferSubscriptionsRequest) (*uatype.TransferSubscriptionsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdTransferSubscriptionsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.TransferSubscriptionsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) DeleteSubscriptions(req uatype.DeleteSubscriptionsRequest) (*uatype.DeleteSubscriptionsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdDeleteSubscriptionsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.DeleteSubscriptionsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) FindServers(req uatype.FindServersRequest) (*uatype.FindServersResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdFindServersRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.FindServersResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) FindServersOnNetwork(req uatype.FindServersOnNetworkRequest) (*uatype.FindServersOnNetworkResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdFindServersOnNetworkRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.FindServersOnNetworkResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) GetEndpoints(req uatype.GetEndpointsRequest) (*uatype.GetEndpointsResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdGetEndpointsRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.GetEndpointsResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) RegisterServer(req uatype.RegisterServerRequest) (*uatype.RegisterServerResponse, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdRegisterServerRequest_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.RegisterServerResponse{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *Client) RegisterServer2(req uatype.RegisterServer2Request) (*uatype.RegisterServer2Response, error) {
	var buf bytes.Buffer
	enc := binary.NewEncoder(&buf)
	if err := enc.Encode(req); err != nil {
		return nil, err
	}

	resp, err := c.Channel.Send(&transport.Request{
		NodeID: uatype.NewFourByteNodeID(0, uatype.NodeIdRegisterServer2Request_Encoding_DefaultBinary),
		Body:   &buf,
	})
	if err != nil {
		return nil, err
	}

	res := &uatype.RegisterServer2Response{}
	if err := binary.NewDecoder(resp.Body).Decode(res); err != nil {
		return nil, err
	}

	return res, nil
}
